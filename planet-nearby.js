"use strict";

//
// Imports
//
const MediaWikiBot = require("nodemw");
const async = require("async");
const PlanetsLib = require("./planets-lib");

//
// Constants
//
var NEARBY_SYSTEMS_REGEX = /([=]=\s*Nearby Systems\s*==)/;
var NEARBY_PLANETS_REGEX = /([=]=\s*Nearby Planets\s*==)/;
var MAP_GALLERY_REGEX = /([=]=\s*Map Gallery\s*==)/;
var REFERENCES_REGEX = /([=]=\s*References\s*[=]=)/;
var LINES_TO_REMOVE = [
    // no more PlanetOverhaul templates
    /{{PlanetOverhaul.*}}\n/,

    // Map of the InnerSphere bib/ref (non-canonical)
    /.*IS_3130\.pdf.*\n/,
    /\*.*<ref.*Map of the Inner Sphere.*<\/ref>\n/

];
var REDIRECT_TEXT = /#REDIRECT \[\[(.*)\]\]/;
var PARALLEL = 1;
var ALWAYS_SHOW = 20;
var PLANETS_PER_ROW = 4;

//
// Command-Line
//
var onlySystem;
if (process.argv.length >= 3) {
    onlySystem = process.argv[2];
    console.log(`Limiting to ${onlySystem}.`);
}

//
// App
//

async.waterfall(
    [
        PlanetsLib.creds,
        function(creds, cb) {
            PlanetsLib.read(onlySystem, function(err, systems, filteredSystems) {
                cb(err, creds, systems, filteredSystems);
            });
        },
        function(creds, systems, filteredSystems, cb) {
            console.log("Logging in...");

            // start MediaWikiBot with configuration
            var client = new MediaWikiBot("config.json");

            // login
            client.logIn(creds.username, creds.password, function(err) {
                cb(err, systems, filteredSystems, client);
            });
        },
        function(systems, filteredSystems, client, cb) {
            console.log(`Updating ${filteredSystems.length} systems...`);

            async.eachLimit(filteredSystems, PARALLEL, function(system, cbEach) {
                updateSystem(client, system, systems, cbEach);
            }, cb);
        }
    ],
    function(err) {
        if (err) {
            console.error(err);
        }

        console.log("Complete!");
    }
);

function updateSystem(client, system, systems, callback) {
    console.log(`Checking ${system.name}: https://www.sarna.net/wiki/${system.sarna}`);

    client.getArticle(system.sarna, function(err, data) {
        // error handling
        if (err) {
            return callback && callback(err);
        }

        // data check
        if (!data) {
            return callback && callback("No data");
        }

        var redirectTest = REDIRECT_TEXT.exec(data);
        if (redirectTest && redirectTest.length) {
            // redirect detected, follow it
            var before = system.sarna;
            system.sarna = redirectTest[1].replace(" ", "_");

            console.log(`  Redirect from ${before} to ${system.sarna}`);

            return updateSystem(client, system, systems, callback);
        }

        var dataBefore = "";
        var dataAfter = "";
        var dataSplit;

        var existingSectionRegEx = false;
        if (NEARBY_PLANETS_REGEX.test(data)) {
            existingSectionRegEx = NEARBY_PLANETS_REGEX;
        } else if (NEARBY_SYSTEMS_REGEX.test(data)) {
            existingSectionRegEx = NEARBY_SYSTEMS_REGEX;
        }

        if (!existingSectionRegEx) {
            // create the Nearby section
            dataSplit = data.split(REFERENCES_REGEX);
            if (dataSplit.length <= 2) {
                return callback && callback("No Nearby and Can't find References");
            }

            dataBefore = dataSplit[0];
            dataAfter = dataSplit[1] + dataSplit[2];
        } else {
            // use the existng Nearby Section
            dataSplit = data.split(existingSectionRegEx);
            if (dataSplit.length <= 2) {
                return callback && callback("Can't split at Nearby");
            }

            dataBefore = dataSplit[0];
            var nearbyAndAfter = dataSplit[2];

            var nextHeading = nearbyAndAfter.indexOf("==");
            if (nextHeading === -1) {
                return callback && callback("Nearby but can't figure out where it ends");
            }

            dataAfter = nearbyAndAfter.substr(nextHeading);
        }

        if (!MAP_GALLERY_REGEX.test(data)) {
            console.log("\tAdding a Gallery");

            dataBefore += "\n== Map Gallery ==\n" +
                '<div class="system-map-gallery"></div>\n\n';
        }

        var dataNearby = dataBefore + "== Nearby Systems ==\n";
        dataNearby += "<!-- NOTE: This table is automatically generated by BattleTechWiki:Project_Planets/Mapping," +
            " and any edits to this section may be overwritten at any time by a bot -->\n";

        // find other systems
        var systemsDiff = systems.map(s => {
            var dx = Math.abs(s.x - system.x);
            var dy = Math.abs(s.y - system.y);

            return {
                name: s.name,
                dist: Math.sqrt(dx * dx + dy * dy),
                sarna: s.sarna
            };
        });

        // sort by distance
        systemsDiff.sort((a, b) => {
            return a.dist - b.dist;
        });

        // see how many are only 60ly or less
        var systems60 = systemsDiff.filter(s => s.dist <= 60 && s.name !== system.name);
        var systemsOver60 = systemsDiff.filter(s => s.dist > 60 && s.name !== system.name);

        var systemsToAdd = systems60.slice(0);
        let within60 = systemsToAdd.length;

        if (systemsToAdd.length < ALWAYS_SHOW) {
            // always ensure there are at least ALWAYS_SHOW planets
            console.log(`\tOnly ${systemsToAdd.length} systems within 60 LY, ` +
                `adding ${ALWAYS_SHOW - systemsToAdd.length} more`);

            // add the next N up to ALWAYS_SHOW
            systemsToAdd = systemsToAdd.concat(systemsOver60.slice(0, ALWAYS_SHOW - systemsToAdd.length));
        } else if (systemsToAdd.length % PLANETS_PER_ROW !== 0) {
            // add the next N up to ALWAYS_SHOW
            systemsToAdd = systemsToAdd.concat(
                systemsOver60.slice(0, PLANETS_PER_ROW - (systemsToAdd.length % PLANETS_PER_ROW)));
        }

        /* eslint-disable quotes */
        dataNearby += `{|class="wikitable nearby-systems" ` +
            `style="background: #gray; text-align:center; border: 1px solid black;"\n`;
        dataNearby += `! colspan="8" | ` +
            `Closest ${systemsToAdd.length} systems (${within60} within 60 light-years)` +
            `<br>Distance in light years, closest systems first:\n`;
        /* eslint-enable quotes */

        // Example row:

        // |-
        // | [[Markesan]]
        // | 13.0
        // | [[New Valencia]]
        // | 13.0
        // | [[Saunemin]]
        // | 22.4
        // | [[Batavia]]
        // | 24.3

        for (var i = 0; i < systemsToAdd.length; i++) {
            var s = systemsToAdd[i];

            if (i % 4 === 0) {
                dataNearby += "|-\n";
            }

            var dist = (Math.round(s.dist * 10) / 10).toFixed(1);

            var sarna = s.sarna.replace("_", " ");
            var name = s.name.replace(/\s\(.*/, "");

            var cellStyle = "";
            if (s.dist <= 30) {
                cellStyle = '| class="lessthan30" ';
            } else if (s.dist <= 60) {
                cellStyle = '| class="over30" ';
            } else {
                cellStyle = '| class="over60" ';
            }

            var link = `[[${name}]]`;
            if (name !== sarna) {
                link = `[[${sarna}|${name}]]`;
            }
            dataNearby += `${cellStyle}| ${link}\n`;

            dataNearby += `${cellStyle}| ${dist}\n`;
        }

        dataNearby += "|-\n";
        dataNearby += "|}\n\n";
        dataNearby += dataAfter;

        for (var lineRegexp = 0; lineRegexp < LINES_TO_REMOVE.length; lineRegexp++) {
            if (LINES_TO_REMOVE[lineRegexp].test(dataNearby)) {
                dataNearby = dataNearby.replace(LINES_TO_REMOVE[lineRegexp], "");
            }
        }

        if (data === dataNearby) {
            console.log(`\tNo changes for ${system.sarna}`);

            return callback && callback();
        }

        PlanetsLib.diff(data, dataNearby);

        client.edit(
            system.sarna,
            dataNearby,
            "Updating Nearby Systems per BattleTechWiki:Project_Planets/Mapping",
            true,
            callback);

        return undefined;
    });
}
